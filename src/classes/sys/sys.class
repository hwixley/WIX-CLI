#!/bin/bash

# COLORS
GREEN=$(tput setaf 2)
ORANGE=$(tput setaf 3)
RED=$(tput setaf 1)
BLUE=$(tput setaf 4)
CYAN=$(tput setaf 6)
BLACK=$(tput setaf 0)
RESET=$(tput setaf 7)

# CONST STRING PROMPTS
export notsupported="${RED}This path is not supported${RESET}"

# PROMPTS
sys.info() {
	echo "${GREEN}$1${RESET}"
}

sys.h1() {
	echo "${BLUE}$1${RESET}"
}

sys.h2() {
	echo "${CYAN}$1${RESET}"
}

sys.warn() {
	echo "${ORANGE}$1${RESET}"
}

sys.error() {
	if [ "$1" = "" ]; then
		echo "$notsupported"
	else
		echo "${RED}$1${RESET}"
	fi
}

# Shell utilities
sys.shell.zsh() {
	if [[ "$(ps -o args= -p $$)" = *"zsh"* ]]; then
		return 0
	else
		return 1
	fi
}

sys.shell.envfile() {
	if sys.shell.zsh; then
		echo "$HOME/.zshrc"
	else
		echo "$HOME/.bashrc"
	fi
	return 0
}

# System specifications

sys.cpu.architecture() {
	uname -m
}

sys.os.mac() {
	if [[ "$OSTYPE" == "darwin"* ]]; then
		return 0
	else
		return 1
	fi
}

sys.os.linux() {
	if [[ "$OSTYPE" == "linux-gnu"* ]]; then
		return 0
	else
		return 1
	fi
}

sys.os.windows() {
	if [[ "$OSTYPE" == "msys" ]]; then
		return 0
	else
		return 1
	fi
}

sys.os.wsl() {
	if [[ "$(uname -r)" == *"Microsoft"* ]]; then
		return 0
	else
		return 1
	fi
}

# System utilities

sys.util.webtext() {
	lynx -dump -cookies "$1"
}

sys.util.clipboard() {
	if command -v pbcopy >/dev/null 2>&1; then
		sys.info "This has been saved to your clipboard!"
		echo "$1" | pbcopy
	elif command -v xclip >/dev/null 2>&1; then
		sys.info "This has been saved to your clipboard!"
		echo "$1" | xclip -selection c
	else
		sys.warn "Clipboard not supported on this system, please install xclip or pbcopy."
	fi
}

sys.util.editfile() {
    if sys.shell.zsh; then
        vi "$1"
    else
        gedit "$1"
    fi
}

sys.util.openfile() {
	xdg-open "file:///$1"
}

sys.util.openurl() {
	if sys.shell.zsh; then
		open "$1"
	else
		{
			xdg-open "$1"
		} &> /dev/null
	fi
}

sys.util.empty() {
	if [ "$1" = "" ]; then
		return 0
	else
		return 1
	fi
}

sys.util.inlineread() {
	if sys.shell.zsh; then
		read "input?$1"
	else
		read -rp "$1 " input
	fi
	echo "$input"
}

sys.util.inlinesed() {
	if sys.shell.zsh; then
		sed -i '' "$1" "$2"
	else
		sed -i "$1" "$2"
	fi
}

sys.util.unset() {
	if sys.shell.zsh; then
		unset "$@"
	else
		export -n "$1"
	fi
}