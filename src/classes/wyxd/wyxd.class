#!/bin/bash

# -- WYXD CLASS --

# Dependencies: sys, lib
. "$WYX_DIR/src/classes/sys/sys.class"
sys sys
. "$WYX_DIR/src/classes/lib/lib.class"
lib lib

# ====================================
# -- INPUTS --
# ====================================

wyxd.arggt() {
	if [ "$num_args" -gt "$1" ]; then
		return 0
	else
		return 1
	fi	
}

# ====================================
# -- DATA --
# ====================================

# User

wyxd.user.username() {
    declare -A user
    declare -a user_lines user_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        user_lines+=("$line")
    done < "$WYX_DATA_DIR/git-user.txt"
    for line in "${user_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        user[$key]=$value
    done

    echo "${user[username]}"
}

wyxd.user.name() {
    declare -A user
    declare -a user_lines user_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        user_lines+=("$line")
    done < "$WYX_DATA_DIR/git-user.txt"
    for line in "${user_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        user[$key]=$value
    done

    echo "${user[name]}"
}

# Directories

wyxd.direxists() {
    declare -A mydirs
    declare -a dir_lines dir_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        dir_lines+=("$line")
    done < "$WYX_DATA_DIR/dir-aliases.txt"
    for line in "${dir_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        mydirs[$key]=$value
    done

    if [[ -v mydirs["$1"] ]]; then
        return 0
    else
        return 1
    fi
}

wyxd.dir() {
    declare -A mydirs
    declare -a dir_lines dir_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        dir_lines+=("$line")
    done < "$WYX_DATA_DIR/dir-aliases.txt"
    for line in "${dir_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        mydirs[$key]=$value
    done

    echo "${mydirs[$1]}"
}

# Organizations

wyxd.org() {
    declare -A myorgs
    declare -a org_lines org_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        org_lines+=("$line")
    done < "$WYX_DATA_DIR/git-orgs.txt"
    for line in "${org_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        myorgs[$key]=$value
    done

    echo "${myorgs[$1]}"
}

wyxd.orgs() {
        # declare -A myorgs
    declare -a org_lines org_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        org_lines+=("$line")
    done < "$WYX_DATA_DIR/git-orgs.txt"
    for line in "${org_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        # myorgs[$key]=$value
        echo "${key}: ${value}"
    done
}

wyxd.orgexists() {
    declare -A myorgs
    declare -a org_lines org_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        org_lines+=("$line")
    done < "$WYX_DATA_DIR/git-orgs.txt"
    for line in "${org_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        myorgs[$key]=$value
    done

	if [[ -v myorgs[$1] ]]; then
		return 0
	else
		return 1
	fi
}

# Scripts

wyxd.scriptexists(){
    declare -A myscripts
    declare -a script_lines script_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        script_lines+=("$line")
    done < "$WYX_DATA_DIR/run-configs.txt"
    for line in "${script_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        myscripts[$key]=$value
    done

	if [[ -v myscripts[$1] ]]; then
        return 0
    else
        return 1
    fi
}

# Keystore

wyxd.check_keystore() {
	envfile="$WYX_DATA_DIR/.env"
	echo "1: $1"
	echo "2: $2"
	echo "3: $3"
	echo "$envfile"
	if [[ -f "$envfile" ]]; then
		# Check if key-value pair exists in .env file
		if grep -q "^$1=" "$envfile"; then
			# Prompt user to replace the existing value
			choice=$(sys.util.inlineread "${GREEN}Key \"$1\" already exists. Do you want to replace the value? (y/n):${RESET}")
			if [[ $choice == "y" || $choice == "Y" ]]; then
				if [ -n "$2" ]; then
					# Replace the value in .env
					sys.util.inlinesed "s/^$1=.*/$1=$2/" "$envfile"
					sys.log.info "Value for key \"$1\" replaced successfully!"
				else
					# Prompt user to enter the value
					value=$(sys.util.inlineread "${GREEN}Enter the value for \"$1\":${RESET}")

					# Replace the value in .env
					sys.util.inlinesed "s/^$1=.*/$1=$value/" "$envfile"
					sys.log.info "Value for key \"$1\" replaced successfully!"
				fi
			else
				sys.log.info "Value for key \"$1\" not replaced."
			fi
		else
			if [ -n "$2" ]; then
				# Append key-value pair to .env
				echo -e "\n$1=$2" >> "$envfile"
				sys.log.info "Value for key \"$1\" appended successfully!"
			else
				# Prompt user to enter the value
				value=$(sys.util.inlineread "${GREEN}Enter the value for \"$1\":${RESET} ")

				# Append key-value pair to .env
				echo -e "\n$1=$value" >> "$envfile"
				sys.log.info "Value for key \"$1\" appended successfully!"
			fi
		fi
	else
		if [ -n "$2" ]; then
			# Create .env file and add the key-value pair
			echo "$1=$2" > "$envfile"
			sys.log.info ".env file created successfully!"
			sys.log.info "Value for key \"$1\" appended successfully!"
		else
			# Prompt user to enter the value
			value=$(sys.util.inlineread "${GREEN}Enter the value for \"$1\":${RESET} ")

			# Create .env file and add the key-value pair
			echo "$1=$value" > "$envfile"
			sys.log.info ".env file created successfully!"
			sys.log.info "Value for key \"$1\" appended successfully!"
		fi
	fi
	echo ""
}

# ====================================
# -- COMMAND FUNCTIONS --
# ====================================

wyxd.cd() {
    declare -A mydirs
    declare -a dir_lines dir_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        dir_lines+=("$line")
    done < "$WYX_DATA_DIR/dir-aliases.txt"
    for line in "${dir_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        mydirs[$key]=$value
    done
	if wyxd.arggt "1" ; then
		if [[ -v mydirs["$1"] ]]; then
			alias_dest="${mydirs[$1]}"
			destination="${alias_dest/~/${HOME}}"
			if ! sys.util.empty "$2" ; then
				destination="${alias_dest/~/${HOME}}/$2"
			fi
			sys.log.info "Travelling to -> $destination"
			eval cd "$destination" || (sys.log.error "The path $destination does not exist" && return 1)
			return 0
		else
			sys.log.error
			return 1
		fi
	else
		sys.log.info "Where do you want to go?"
		read -r dir
		if [[ -v mydirs[$dir] ]]; then
			alias_dest="${mydirs[$dir]}"
			destination="${alias_dest/~/${HOME}}"
			sys.log.info "Travelling to -> $destination"
			eval cd "$destination" || (sys.log.error "The path $destination does not exist" && return 1)
			return 0
		else
			sys.log.error
			return 1
		fi
	fi
}

wyxd.run() {
    declare -A myscripts
    declare -a script_lines script_lines=()
    while IFS='' read -r line || [[ -n "$line" ]]; do
        script_lines+=("$line")
    done < "$WYX_DATA_DIR/run-configs.txt"
    for line in "${script_lines[@]}"; do
        key=${line%%=*}
        value=${line#*=}
        myscripts[$key]=$value
    done

	if [[ -v myscripts[$1] ]]; then
		sys.log.info "Running $1 script!"
		source "$WYX_DATA_DIR/run-configs/${myscripts[$1]}.sh"
	else
		sys.log.error "This script does not exist... Please try again"
	fi
}

# ====================================
# -- INFO FUNCTIONS --
# ====================================


wyxd.command_info() {

	echo "Welcome to the..."
	echo ""
	sys.log.info " ${CYAN}Y${BLUE}8b ${CYAN}Y${BLUE}8b ${CYAN}Y${BLUE}Y88b ${CYAN}Y${BLUE}88b Y8P ${CYAN}Y${BLUE}8b Y8P${GREEN}     e88'Y88 888     888 "
	sys.log.info "  ${CYAN}Y${BLUE}8b ${CYAN}Y${BLUE}8b ${CYAN}Y${BLUE}8P   ${CYAN}Y${BLUE}88b Y   ${CYAN}Y${BLUE}8b Y${GREEN}     d888  'Y 888     888 "
	sys.log.info "   ${CYAN}Y${BLUE}8b ${CYAN}Y${BLUE}8b ${CYAN}Y${BLUE}     ${CYAN}Y${BLUE}88b     ${CYAN}Y${BLUE}8b${GREEN}     C8888     888     888 "
	sys.log.info "    ${CYAN}Y${BLUE}8b ${CYAN}Y${BLUE}8b       ${CYAN}8${BLUE}88    e ${CYAN}Y${BLUE}8b${GREEN}     Y888  ,d 888  ,d 888 "
	sys.log.info "     ${CYAN}Y${BLUE}8P ${CYAN}Y${BLUE}        ${CYAN}8${BLUE}88   d8b ${CYAN}Y${BLUE}8b${GREEN}     \"88,d88 888,d88 888 "
	echo ""
	echo "v$version"
	echo ""

	if [ -f "$WYX_DATA_DIR/git-user.txt" ]; then
		sys.log.info "User: ${RESET}$(wyxd.user.username)"
		sys.log.info "Name: ${RESET}$(wyxd.user.name)"
		echo ""
	fi
	if [ ! -d "$WYX_DIR/src/data/.cache" ]; then
		mkdir "$WYX_DIR/src/data/.cache"
	fi
	if [ -f "$WYX_DIR/src/data/.cache/cmdinfo.term.wyx" ]; then
		cat "$WYX_DIR/src/data/.cache/cmdinfo.term.wyx"
	else
		wyxd.cache.update
	fi
	echo ""
}

wyxd.cache.cmdinfo() {
	if [ ! -d "$WYX_DIR/src/data/.cache" ]; then
		mkdir "$WYX_DIR/src/data/.cache"
	fi
	sys.log.info "Fetching command information..."
	echo ""
	(lib.csv.all & lib.csv.all > "$WYX_DIR/src/data/.cache/cmdinfo.term.wyx" & lib.csv.all "git" > "$WYX_DIR/src/data/.cache/cmdinfo.git.wyx" & wait)
}

wyxd.cache.update() {
	if [ ! -d "$WYX_DIR/src/data/.cache" ]; then
		mkdir "$WYX_DIR/src/data/.cache"
	fi
	sys.log.info "Updating wyxd cache..."
	echo ""
	(wyxd.cache.cmdinfo & wyxd.readme.update & wait)
}

wyxd.readme.update() {
	if [ ! -f "$WYX_DIR/.github/README.md" ]; then
		sys.log.error "README.md does not exist in the project"
		return 1
	fi
	sys.log.info "Updating README.md..."
	echo ""
	cp -f "$WYX_DIR/.github/README_TEMPLATE.md" "$WYX_DIR/.github/README.md"
	sed -i "s:@VERSION@:$version:g" "$WYX_DIR/.github/README.md"
	commands=$(cat "$WYX_DIR/src/data/.cache/cmdinfo.git.wyx" | sed -r "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2};?)?)?[mGK]//g")
	echo "$commands" >> "$WYX_DIR/.github/README.md"
	sys.log.info "README.md updated successfully!"
}